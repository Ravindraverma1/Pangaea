pipeline{
    agent any 
    environment{
         GIT_COMMIT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()    
        SLACK_CHANNEL       = "#tech-notifs"
        SLACK_COLOR_DANGER  = "#E01563"
        SLACK_COLOR_INFO    = "#6ECADC"
        SLACK_COLOR_WARNING = "#FFC300"
        SLACK_COLOR_GOOD    = "#3EB991"
        JOB_NAME            = "test-job"    
    }
            options {
        buildDiscarder logRotator( 
                    daysToKeepStr: '16', 
                    numToKeepStr: '10'
            )  
        }
    stages{
        stage("Docker image build and push"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'docker_pass', variable: 'docker_password')]) {
                             sh '''
                                docker build -t ravindra.tech:8083/nodeapp:${VERSION} .
                                docker login -u admin -p $docker_password ravindra.tech:8083 
                                docker push  ravindra.tech:8083/nodeapp:${VERSION}
                            '''
                    }
                }
            }
        }
        stage('Identifying misconfigs using datree'){
            steps{
                script{

                    dir('kubernetes/') {
                        withEnv(['DATREE_TOKEN=GJdx2cP2TCDyUY3EhQKgTc']) {
                              sh 'helm datree mycharttest nodeapp/'
                        }
                    }
                }
            }
        }
        stage("pushing the helm charts to nexus"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'docker_pass', variable: 'docker_password')]) {
                          dir('kubernetes/') {
                             sh '''
                                 helmversion=$( helm show chart nodeapp | grep version | cut -d: -f 2 | tr -d ' ')
                                 tar -czvf  nodeapp-${helmversion}.tgz nodeapp/
                                 curl -u admin:$docker_password http://ravindra.tech:8081/repository/helm-hosted/ --upload-file nodeapp-${helmversion}.tgz -v
                            '''
                          }
                    }
                }
            }
        }
        stage('Deploying application on k8s cluster') {
            steps {
               script{
                   withCredentials([kubeconfigFile(credentialsId: 'kubernetes-config', variable: 'KUBECONFIG')]) {
                        dir('kubernetes/') {
                          sh 'helm upgrade --install --set image.repository="ravindra.tech:8083/nodeapp" --set image.tag="${VERSION}" myjavaapp nodeapp/ ' 
                        }
                    }
               }
            }
        }
    }

    post {
    always { 
      echo "One way or another, I have finished" 
      //deleteDir() /* clean up our workspace */ 
    } 
// trigger when successful 
    success { 
        echo "I succeeeded!" 
        slackSend (channel: "${env.SLACK_CHANNEL}", color: "${env.SLACK_COLOR_GOOD}", message: "*SUCCESS:* Job '${env.JOB_NAME} (${env.BUILD_URL})") 
    } 

    // trigger when failed 
    failure { 
        echo "I failed :(" 
        //currentBuild.rawBuild.getLog(10) 
        slackSend (channel: "${env.SLACK_CHANNEL}", color: "${env.SLACK_COLOR_DANGER}", message: "*FAILED:* Job '${env.JOB_NAME} (${env.BUILD_URL})") 
    } 

    // trigger when aborted 
    aborted { 
        echo "Build aborted!" 
        slackSend (channel: "${env.SLACK_CHANNEL}", color: "${env.SLACK_COLOR_WARNING}", message: "*ABORTED:* Job '${env.JOB_NAME} (${env.BUILD_URL})") 
    } 

  } 
}